<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\modules\location\models\base;

use Yii;
use dosamigos\translateable\TranslateableBehavior;

/**
 * This is the base-model class for table "location_type".
 *
 * @property integer $id
 * @property integer $created_at
 * @property integer $created_by
 * @property integer $updated_at
 * @property integer $updated_by
 *
 * @property \app\modules\location\models\LocationPlace[] $locationPlaces
 * @property \app\modules\location\models\LocationSublocationCounter[] $locationSublocationCounters
 * @property string $aliasModel
 */
abstract class LocationType extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'location_type';
    }

    /**
     * Alias name of table for crud viewsLists all Area models.
     * Change the alias name manual if needed later
     * @return string
     */
    public function getAliasModel($plural=false)
    {
        if($plural){
            return Yii::t('location-model', 'LocationTypes');
        }else{
            return Yii::t('location-model', 'LocationType');
        }
    }
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'translatable' => [
                'class' => TranslateableBehavior::className(),
                // in case you renamed your relation, you can setup its name
                // 'relation' => 'translations',
                'translationAttributes' => [
                    'name',
                    'abbreviation'
                ]
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['created_at', 'created_by', 'updated_at', 'updated_by'], 'integer']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('location-model', 'ID'),
            'created_at' => Yii::t('location-model', 'Created At'),
            'created_by' => Yii::t('location-model', 'Created By'),
            'updated_at' => Yii::t('location-model', 'Updated At'),
            'updated_by' => Yii::t('location-model', 'Updated By'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(
            parent::attributeHints(),
            [
            'id' => Yii::t('location-model', 'ID'),
            'created_at' => Yii::t('location-model', 'Created At'),
            'created_by' => Yii::t('location-model', 'Created By'),
            'updated_at' => Yii::t('location-model', 'Updated At'),
            'updated_by' => Yii::t('location-model', 'Updated By'),
            ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLocationPlaces()
    {
        return $this->hasMany(\app\modules\location\models\LocationPlace::className(), ['type_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLocationSublocationCounters()
    {
        return $this->hasMany(\app\modules\location\models\LocationSublocationCounter::className(), ['type_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTranslations()
    {
        return $this->hasMany(\app\modules\location\models\LocationTypeLang::className(), ['type_id' => 'id']);
    }



}
